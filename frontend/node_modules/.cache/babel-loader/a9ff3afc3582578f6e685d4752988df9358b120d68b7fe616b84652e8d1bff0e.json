{"ast":null,"code":"import api from './api';\nexport const adminService = {\n  // Obtenir tous les utilisateurs\n  getAllUsers: async (params = {}) => {\n    const queryString = new URLSearchParams(params).toString();\n    return await api.get(`/admin/users?${queryString}`);\n  },\n  // Obtenir tous les cours\n  getAllCourses: async (params = {}) => {\n    const queryString = new URLSearchParams(params).toString();\n    return await api.get(`/admin/courses?${queryString}`);\n  },\n  // Changer le mot de passe d'un utilisateur\n  changeUserPassword: async (userId, newPassword) => {\n    return await api.put(`/admin/users/${userId}/password`, {\n      newPassword\n    });\n  },\n  // Mettre à jour le statut d'un utilisateur\n  updateUserStatus: async (userId, status) => {\n    return await api.put(`/admin/users/${userId}/status`, {\n      status\n    });\n  },\n  // Supprimer un utilisateur\n  deleteUser: async userId => {\n    return await api.delete(`/admin/users/${userId}`);\n  },\n  // Obtenir les statistiques de la plateforme\n  getPlatformStats: async () => {\n    return await api.get('/admin/stats');\n  },\n  // Obtenir les logs d'activité\n  getActivityLogs: async (params = {}) => {\n    const queryString = new URLSearchParams(params).toString();\n    return await api.get(`/admin/logs?${queryString}`);\n  },\n  // Mettre à jour les paramètres de la plateforme\n  updatePlatformSettings: async settings => {\n    return await api.put('/admin/settings', settings);\n  },\n  // Obtenir les paramètres de la plateforme\n  getPlatformSettings: async () => {\n    return await api.get('/admin/settings');\n  }\n};","map":{"version":3,"names":["api","adminService","getAllUsers","params","queryString","URLSearchParams","toString","get","getAllCourses","changeUserPassword","userId","newPassword","put","updateUserStatus","status","deleteUser","delete","getPlatformStats","getActivityLogs","updatePlatformSettings","settings","getPlatformSettings"],"sources":["C:/Users/Dali_bnslh/Desktop/Final plat/frontend/src/services/adminService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const adminService = {\r\n  // Obtenir tous les utilisateurs\r\n  getAllUsers: async (params = {}) => {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return await api.get(`/admin/users?${queryString}`);\r\n  },\r\n\r\n  // Obtenir tous les cours\r\n  getAllCourses: async (params = {}) => {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return await api.get(`/admin/courses?${queryString}`);\r\n  },\r\n\r\n  // Changer le mot de passe d'un utilisateur\r\n  changeUserPassword: async (userId, newPassword) => {\r\n    return await api.put(`/admin/users/${userId}/password`, { \r\n      newPassword \r\n    });\r\n  },\r\n\r\n  // Mettre à jour le statut d'un utilisateur\r\n  updateUserStatus: async (userId, status) => {\r\n    return await api.put(`/admin/users/${userId}/status`, { \r\n      status \r\n    });\r\n  },\r\n\r\n  // Supprimer un utilisateur\r\n  deleteUser: async (userId) => {\r\n    return await api.delete(`/admin/users/${userId}`);\r\n  },\r\n\r\n  // Obtenir les statistiques de la plateforme\r\n  getPlatformStats: async () => {\r\n    return await api.get('/admin/stats');\r\n  },\r\n\r\n  // Obtenir les logs d'activité\r\n  getActivityLogs: async (params = {}) => {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return await api.get(`/admin/logs?${queryString}`);\r\n  },\r\n\r\n  // Mettre à jour les paramètres de la plateforme\r\n  updatePlatformSettings: async (settings) => {\r\n    return await api.put('/admin/settings', settings);\r\n  },\r\n\r\n  // Obtenir les paramètres de la plateforme\r\n  getPlatformSettings: async () => {\r\n    return await api.get('/admin/settings');\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,YAAY,GAAG;EAC1B;EACAC,WAAW,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IAClC,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC1D,OAAO,MAAMN,GAAG,CAACO,GAAG,CAAC,gBAAgBH,WAAW,EAAE,CAAC;EACrD,CAAC;EAED;EACAI,aAAa,EAAE,MAAAA,CAAOL,MAAM,GAAG,CAAC,CAAC,KAAK;IACpC,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC1D,OAAO,MAAMN,GAAG,CAACO,GAAG,CAAC,kBAAkBH,WAAW,EAAE,CAAC;EACvD,CAAC;EAED;EACAK,kBAAkB,EAAE,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;IACjD,OAAO,MAAMX,GAAG,CAACY,GAAG,CAAC,gBAAgBF,MAAM,WAAW,EAAE;MACtDC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,gBAAgB,EAAE,MAAAA,CAAOH,MAAM,EAAEI,MAAM,KAAK;IAC1C,OAAO,MAAMd,GAAG,CAACY,GAAG,CAAC,gBAAgBF,MAAM,SAAS,EAAE;MACpDI;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,UAAU,EAAE,MAAOL,MAAM,IAAK;IAC5B,OAAO,MAAMV,GAAG,CAACgB,MAAM,CAAC,gBAAgBN,MAAM,EAAE,CAAC;EACnD,CAAC;EAED;EACAO,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,OAAO,MAAMjB,GAAG,CAACO,GAAG,CAAC,cAAc,CAAC;EACtC,CAAC;EAED;EACAW,eAAe,EAAE,MAAAA,CAAOf,MAAM,GAAG,CAAC,CAAC,KAAK;IACtC,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC1D,OAAO,MAAMN,GAAG,CAACO,GAAG,CAAC,eAAeH,WAAW,EAAE,CAAC;EACpD,CAAC;EAED;EACAe,sBAAsB,EAAE,MAAOC,QAAQ,IAAK;IAC1C,OAAO,MAAMpB,GAAG,CAACY,GAAG,CAAC,iBAAiB,EAAEQ,QAAQ,CAAC;EACnD,CAAC;EAED;EACAC,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B,OAAO,MAAMrB,GAAG,CAACO,GAAG,CAAC,iBAAiB,CAAC;EACzC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}